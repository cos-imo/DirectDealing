plugins {
    id 'java'
    id 'application'
    id 'com.adarshr.test-logger' version '4.0.0'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

repositories {
    mavenCentral()
}

group 'eu.telecomnancy'
version '1.0-SNAPSHOT'

ext {
    junitVersion = '5.10.1'
    javafxVersion = '21'
    jdkVersion = '21'
}

java {
    sourceCompatibility = "${jdkVersion}"
    targetCompatibility = "${jdkVersion}"
}

application {
    mainModule = 'eu.telecomnancy.labfx'
    mainClass = 'eu.telecomnancy.labfx.Main'
}

javafx {
    version = "${javafxVersion}"
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
	testImplementation(platform('org.junit:junit-bom:${junitVersion}'))
	testImplementation('org.junit.jupiter:junit-jupiter')
    implementation 'org.xerial:sqlite-jdbc:3.36.0.1'
    implementation 'joda-time:joda-time:2.12.6'
    implementation 'org.openjfx:javafx-controls:17'
    implementation 'org.openjfx:javafx-fxml:17'
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'ch.qos.logback:logback-classic:1.2.6'

}

apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
    archiveBaseName.set("labfx")
    archiveClassifier.set(null)
    archiveVersion.set(null)

    mergeServiceFiles()
}


test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

testlogger {
    theme 'mocha'
    showExceptions true
    showStackTraces true
    showFullStackTraces false
    showCauses true
    slowThreshold 5000
    showSummary true
    showSimpleNames false
    showPassed true
    showSkipped true
    showFailed true
    showStandardStreams false
    showPassedStandardStreams true
    showSkippedStandardStreams true
    showFailedStandardStreams true
}

jar {
    manifest {
        attributes(
            'Main-Class': 'eu.telecomnancy.labfx.Main',
            'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' ')
        )
    }

    duplicatesStrategy = 'exclude'
}

startScripts {
    dependsOn shadowJar
}

startShadowScripts {
    dependsOn shadowJar
}


distZip.dependsOn shadowJar
distTar.dependsOn shadowJar
startScripts.dependsOn shadowJar
startShadowScripts.dependsOn shadowJar
startShadowScripts.mustRunAfter shadowJar

distZip.dependsOn shadowJar
distTar.dependsOn shadowJar
startScripts.dependsOn shadowJar